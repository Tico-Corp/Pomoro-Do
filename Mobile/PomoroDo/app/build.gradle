plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.hilt
    alias libs.plugins.ksp
    alias libs.plugins.room
    alias libs.plugins.google.services
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}

android {
    namespace 'com.tico.pomorodo'
    compileSdk 34

    defaultConfig {
        applicationId "com.tico.pomorodo"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            defaultConfig {
                buildConfigField("String", "GOOGLE_AUTH_CLIENT_ID", "\"${localProperties["GOOGLE_AUTH_CLIENT_ID"]}\"")
                buildConfigField "String", "BASE_URL", "\"${localProperties["BASE_URL"]}\""
                buildConfigField "String", "HEADER_PREFIX", "\"${localProperties["HEADER_PREFIX"]}\""
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    room {
        schemaDirectory "$projectDir/schemas"
    }
}

dependencies {
    // jetpack compose로 생성했을 때 기본 제공되는 라이브러리들
    implementation libs.bundles.androidx
    implementation platform(libs.compose.bom)
    testImplementation libs.junit
    androidTestImplementation libs.test.junit
    androidTestImplementation libs.test.espresso
    androidTestImplementation platform(libs.compose.bom)
    androidTestImplementation libs.compose.junit
    debugImplementation libs.compose.tooling
    debugImplementation libs.compose.manifest

    // api 통신을 위한 라이브러리
    implementation libs.bundles.api

    // 종속성주입을 위한 라이브러리
    implementation libs.hilt.android
    ksp libs.hilt.compiler

    // material3 최신 버전 적용을 위한 라이브러리
    implementation libs.bundles.material3

    // url 을 사용한 이미지 로딩을 위한 라이브러리
    implementation libs.glide.compose

    // 타이머 시간 변경을 위한 wheel time picker 라이브러리
    implementation libs.compose.wheel.picker

    // 네비게이션 작업을 위한 라이브러리
    implementation libs.androidx.hilt.navigation.compose

    // google login을 위한 credential manager jetpack
    implementation libs.bundles.credential

    // 암호화된 sharedpreference를 사용하기 위한 라이브러리
    implementation libs.androidx.security

    // Firebase를 위한 라이브러리
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics

    // FID를 위한 라이브러리
    implementation libs.firebase.installations

    // room을 사용하기 위한 라이브러리
    implementation libs.bundles.room
    annotationProcessor libs.androidx.room.compiler
    ksp libs.androidx.room.compiler
    testImplementation libs.androidx.room.testing
}